{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","winningProposal","votersByAddress","proposals","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","setState","runInit","alert","error","methods","getVotersAddresses","call","from","getProposals","registerVoters","voter","value","send","startProposalsRegistration","registerProposals","description","proposalDescription","endProposalsRegistration","startVotingSession","vote","event","proposalId","target","id","setStatusToTallied","getWinner","errJson","toString","indexOf","replace","JSON","parse","txHash","Object","keys","data","reason","err","this","className","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","map","voterAccount","key","Form","Group","controlId","Control","type","ref","input","Button","onClick","proposal","endVotingSession","title","voteCount","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94949c2f.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null, winningProposal: null, votersByAddress: null, proposals: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, winningProposal: null }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runInit = async () => {\n    const { accounts, contract } = this.state;\n\n    // Get the allowed to vote account list\n    const votersByAddress = await contract.methods.getVotersAddresses().call({from: accounts[0]});\n    const proposals = await contract.methods.getProposals().call();\n    console.log(proposals);\n    // Update state\n    this.setState({ votersByAddress: votersByAddress, proposals: proposals });\n  };\n\n  registerVoters = async () => {\n    const { accounts, contract } = this.state;\n    const voter = this.voter.value;\n    await contract.methods.registerVoters(voter).send({ from: accounts[0] });\n    this.runInit();\n  }\n\n  startProposalsRegistration = async () => {\n    const { accounts, contract } = this.state;\n    await contract.methods.startProposalsRegistration().send({from: accounts[0]});\n  }\n\n  registerProposals = async () => {\n    const { accounts, contract } = this.state;\n    const description = this.proposalDescription.value;\n    await contract.methods.registerProposals(description).send({from: accounts[0]});\n    this.runInit();\n  }\n\n  endProposalsRegistration = async () => {\n    const { accounts, contract } = this.state;\n    await contract.methods.endProposalsRegistration().send({from: accounts[0]});\n  }\n\n  startVotingSession = async () => {\n    const { accounts, contract } = this.state;\n    await contract.methods.startVotingSession().send({from: accounts[0]});\n  }\n\n  vote = async (event) => {\n    const { accounts, contract } = this.state;\n    const proposalId = event.target.id !== \"\" ? event.target.id : this.proposalId.value;\n    console.log(proposalId);\n    await contract.methods.vote(proposalId).send({from: accounts[0]});\n  }\n\n  setStatusToTallied = async () => {\n    const { accounts, contract } = this.state;\n    await contract.methods.setStatusToTallied().send({from: accounts[0]});\n  }\n\n  getWinner = async () => {\n    const { accounts, contract, winningProposal } = this.state;\n    \n    try {\n      winningProposal = await contract.methods.getWinner().call({from: accounts[0]});\n      this.setState({\n        winningProposal : winningProposal\n      });\n    } catch (err) {\n      let errJson = err.toString();\n      if (errJson.indexOf('Internal JSON-RPC error.') > -1) {\n        errJson = errJson.replace('\\n', '').replace(\"Error: \", '').replace('Internal JSON-RPC error.', '')\n        errJson = JSON.parse(errJson)\n       }\n      const txHash = Object.keys(errJson.data)[0];\n      const reason = errJson.data[txHash].reason;\n      this.setState({\n        err : reason\n      });\n    }\n    \n  }\n\n\n  render() {\n    const { winningProposal, votersByAddress, proposals } = this.state;\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div>\n            <h2 className=\"text-center\">Système de vote avec liste d'utilisateurs autorisés et propositions</h2>\n            <hr></hr>\n            <br></br>\n        </div>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Liste des votants autorisés</strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {votersByAddress !== null && \n                        votersByAddress.map((voterAccount) => <tr key={voterAccount}><td>{voterAccount}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Autoriser un nouveau votant</strong></Card.Header>\n            <Card.Body>\n              <Form.Group controlId=\"formVoter\">\n                <Form.Control type=\"text\"\n                ref={(input) => { this.voter = input }}\n                />\n              </Form.Group>\n              <Button onClick={ this.registerVoters } variant=\"dark\" > Autoriser </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Déclencher la session d'enregistrement des propositions</strong></Card.Header>\n            <Card.Body>\n              <Button onClick={ this.startProposalsRegistration } variant=\"dark\" > Démarrer session propositions </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Enregistrer une proposition à soumettre au vote</strong></Card.Header>\n            <Card.Body>\n              <Form.Group controlId=\"formProposal\">\n                  <Form.Control type=\"text\"\n                  ref={(input) => { this.proposalDescription = input }}\n                  />\n              </Form.Group>\n              <Button onClick={ this.registerProposals } variant=\"dark\" > Enregister </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Liste des propositions</strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {proposals !== null && \n                        proposals.map((proposal, key) => \n                        <tr key={key}>\n                          <td>{proposal.description}</td>\n                          <td><button id={key} onClick={ this.vote }>Voter pour cette proposition</button></td>\n                        </tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br> \n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Déclencher la fin de la session d'enregistrement des propositions</strong></Card.Header>\n            <Card.Body>\n              <Button onClick={ this.endProposalsRegistration } variant=\"dark\" > Fin session propositions </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Déclencher la session de vote</strong></Card.Header>\n            <Card.Body>\n              <Button onClick={ this.startVotingSession } variant=\"dark\" > Démarrer les votes </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Voter pour une proposition</strong></Card.Header>\n            <Card.Body>\n              <Form.Group controlId=\"formVotingProposal\">\n                  <Form.Control type=\"text\"\n                  ref={(input) => { this.proposalId = input }}\n                  />\n              </Form.Group>\n              <Button onClick={ this.vote } variant=\"dark\" > Voter </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Déclencher la fin de la session de vote</strong></Card.Header>\n            <Card.Body>\n              <Button onClick={ this.endVotingSession } variant=\"dark\" > Fin session de vote </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Déclencher le fait que les votes sont comptabilisés pour afficher la proposition gagnante</strong></Card.Header>\n            <Card.Body>\n              <Button onClick={ this.setStatusToTallied } variant=\"dark\" > Comptabilisation des votes </Button>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Affiche la proposition gagnante</strong></Card.Header>\n            <Card.Body>\n              <Button onClick={ this.getWinner } variant=\"dark\" > Afficher la proposition gagnante </Button>\n              {this.state.err && <h2>{this.state.err}</h2>}\n              {this.state.winningProposal !== null && (\n                <blockquote className=\"blockquote mb-0\">\n                  <p id=\"winningProposalDescription\">\n                    {' '}\n                    {this.state.winningProposal.description}\n                    {' '}\n                  </p>\n                  \n                    <footer className=\"blockquote-footer\">\n                      <p>Avec un total de</p> \n                      <cite title=\"Source Title\" className=\"testage\" id=\"winningProposalVotecount\">\n                        {this.state.winningProposal.voteCount} vote{this.state.winningProposal.voteCount > 1 && ('s')}\n                      </cite>\n                    </footer>\n                </blockquote>\n              )}\n            </Card.Body>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}